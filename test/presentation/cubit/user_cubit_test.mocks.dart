// Mocks generated by Mockito 5.4.6 from annotations
// in dvpartners_tech_test/test/presentation/cubit/user_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dvpartners_tech_test/domain/entities/user.dart' as _i2;
import 'package:dvpartners_tech_test/domain/usecases/create_user_usecase.dart'
    as _i5;
import 'package:dvpartners_tech_test/domain/usecases/delete_all_users_usecase.dart'
    as _i8;
import 'package:dvpartners_tech_test/domain/usecases/delete_user_usecase.dart'
    as _i7;
import 'package:dvpartners_tech_test/domain/usecases/get_users_usecase.dart'
    as _i3;
import 'package:dvpartners_tech_test/domain/usecases/update_user_usecase.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUsersUseCase extends _i1.Mock implements _i3.GetUsersUseCase {
  MockGetUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.User>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
          )
          as _i4.Future<List<_i2.User>>);
}

/// A class which mocks [CreateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateUserUseCase extends _i1.Mock implements _i5.CreateUserUseCase {
  MockCreateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> call(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#call, [user]),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#call, [user])),
            ),
          )
          as _i4.Future<_i2.User>);
}

/// A class which mocks [UpdateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserUseCase extends _i1.Mock implements _i6.UpdateUserUseCase {
  MockUpdateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> call(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#call, [user]),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#call, [user])),
            ),
          )
          as _i4.Future<_i2.User>);
}

/// A class which mocks [DeleteUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteUserUseCase extends _i1.Mock implements _i7.DeleteUserUseCase {
  MockDeleteUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteAllUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAllUsersUseCase extends _i1.Mock
    implements _i8.DeleteAllUsersUseCase {
  MockDeleteAllUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
